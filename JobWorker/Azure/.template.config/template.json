{
  "$schema": "http://json.schemastore.org/template",
  "author": "mcma",
  "identity": "Mcma.Module.Azure.Worker",
  "name": "MCMA Azure Function App Worker",
  "shortName": "mcmaazworker",
  "tags": {
      "language": "C#",
      "type": "project"
  },
  "sourceName": "Mcma.Module.Azure.Worker",
  "classifications": ["Library"],
  "symbols": {
    "moduleName":{
      "type": "parameter",
      "replaces": "__moduleName__",
      "fileRename": "__moduleName__",
      "isRequired": true
    },
    "moduleNameSnake": {
        "type": "generated",
        "replaces": "__moduleNameSnake__",
        "generator": "regex",
        "dataType": "string",
        "parameters": {
            "source": "moduleName",
            "action": "replace",
            "steps": [
              { "regex": "([a-z])(A)", "replacement": "$1-a" },
              { "regex": "([a-z])(B)", "replacement": "$1-b" },
              { "regex": "([a-z])(C)", "replacement": "$1-c" },
              { "regex": "([a-z])(D)", "replacement": "$1-d" },
              { "regex": "([a-z])(E)", "replacement": "$1-e" },
              { "regex": "([a-z])(F)", "replacement": "$1-f" },
              { "regex": "([a-z])(G)", "replacement": "$1-g" },
              { "regex": "([a-z])(H)", "replacement": "$1-h" },
              { "regex": "([a-z])(I)", "replacement": "$1-i" },
              { "regex": "([a-z])(J)", "replacement": "$1-j" },
              { "regex": "([a-z])(K)", "replacement": "$1-k" },
              { "regex": "([a-z])(L)", "replacement": "$1-l" },
              { "regex": "([a-z])(M)", "replacement": "$1-m" },
              { "regex": "([a-z])(N)", "replacement": "$1-n" },
              { "regex": "([a-z])(O)", "replacement": "$1-o" },
              { "regex": "([a-z])(P)", "replacement": "$1-p" },
              { "regex": "([a-z])(Q)", "replacement": "$1-q" },
              { "regex": "([a-z])(R)", "replacement": "$1-r" },
              { "regex": "([a-z])(S)", "replacement": "$1-s" },
              { "regex": "([a-z])(T)", "replacement": "$1-t" },
              { "regex": "([a-z])(U)", "replacement": "$1-u" },
              { "regex": "([a-z])(V)", "replacement": "$1-v" },
              { "regex": "([a-z])(W)", "replacement": "$1-w" },
              { "regex": "([a-z])(X)", "replacement": "$1-x" },
              { "regex": "([a-z])(Y)", "replacement": "$1-y" },
              { "regex": "([a-z])(Z)", "replacement": "$1-z" },

              { "regex": "^(A)", "replacement": "a" },
              { "regex": "^(B)", "replacement": "b" },
              { "regex": "^(C)", "replacement": "c" },
              { "regex": "^(D)", "replacement": "d" },
              { "regex": "^(E)", "replacement": "e" },
              { "regex": "^(F)", "replacement": "f" },
              { "regex": "^(G)", "replacement": "g" },
              { "regex": "^(H)", "replacement": "h" },
              { "regex": "^(I)", "replacement": "i" },
              { "regex": "^(J)", "replacement": "j" },
              { "regex": "^(K)", "replacement": "k" },
              { "regex": "^(L)", "replacement": "l" },
              { "regex": "^(M)", "replacement": "m" },
              { "regex": "^(N)", "replacement": "n" },
              { "regex": "^(O)", "replacement": "o" },
              { "regex": "^(P)", "replacement": "p" },
              { "regex": "^(Q)", "replacement": "q" },
              { "regex": "^(R)", "replacement": "r" },
              { "regex": "^(S)", "replacement": "s" },
              { "regex": "^(T)", "replacement": "t" },
              { "regex": "^(U)", "replacement": "u" },
              { "regex": "^(V)", "replacement": "v" },
              { "regex": "^(W)", "replacement": "w" },
              { "regex": "^(X)", "replacement": "x" },
              { "regex": "^(Y)", "replacement": "y" },
              { "regex": "^(Z)", "replacement": "z" }
            ]
        }
    },
    "mcmaNamespace":{
      "type": "parameter",
      "replaces": "__mcmaNamespace__",
      "fileRename": "__mcmaNamespace__",
      "isRequired": true
    },
    "mcmaNamespaceSnake": {
        "type": "generated",
        "replaces": "__mcmaNamespaceSnake__",
        "generator": "regex",
        "dataType": "string",
        "parameters": {
            "source": "mcmaNamespace",
            "action": "replace",
            "steps": [
              { "regex": "([a-z])(A)", "replacement": "$1-a" },
              { "regex": "([a-z])(B)", "replacement": "$1-b" },
              { "regex": "([a-z])(C)", "replacement": "$1-c" },
              { "regex": "([a-z])(D)", "replacement": "$1-d" },
              { "regex": "([a-z])(E)", "replacement": "$1-e" },
              { "regex": "([a-z])(F)", "replacement": "$1-f" },
              { "regex": "([a-z])(G)", "replacement": "$1-g" },
              { "regex": "([a-z])(H)", "replacement": "$1-h" },
              { "regex": "([a-z])(I)", "replacement": "$1-i" },
              { "regex": "([a-z])(J)", "replacement": "$1-j" },
              { "regex": "([a-z])(K)", "replacement": "$1-k" },
              { "regex": "([a-z])(L)", "replacement": "$1-l" },
              { "regex": "([a-z])(M)", "replacement": "$1-m" },
              { "regex": "([a-z])(N)", "replacement": "$1-n" },
              { "regex": "([a-z])(O)", "replacement": "$1-o" },
              { "regex": "([a-z])(P)", "replacement": "$1-p" },
              { "regex": "([a-z])(Q)", "replacement": "$1-q" },
              { "regex": "([a-z])(R)", "replacement": "$1-r" },
              { "regex": "([a-z])(S)", "replacement": "$1-s" },
              { "regex": "([a-z])(T)", "replacement": "$1-t" },
              { "regex": "([a-z])(U)", "replacement": "$1-u" },
              { "regex": "([a-z])(V)", "replacement": "$1-v" },
              { "regex": "([a-z])(W)", "replacement": "$1-w" },
              { "regex": "([a-z])(X)", "replacement": "$1-x" },
              { "regex": "([a-z])(Y)", "replacement": "$1-y" },
              { "regex": "([a-z])(Z)", "replacement": "$1-z" },

              { "regex": "^(A)", "replacement": "a" },
              { "regex": "^(B)", "replacement": "b" },
              { "regex": "^(C)", "replacement": "c" },
              { "regex": "^(D)", "replacement": "d" },
              { "regex": "^(E)", "replacement": "e" },
              { "regex": "^(F)", "replacement": "f" },
              { "regex": "^(G)", "replacement": "g" },
              { "regex": "^(H)", "replacement": "h" },
              { "regex": "^(I)", "replacement": "i" },
              { "regex": "^(J)", "replacement": "j" },
              { "regex": "^(K)", "replacement": "k" },
              { "regex": "^(L)", "replacement": "l" },
              { "regex": "^(M)", "replacement": "m" },
              { "regex": "^(N)", "replacement": "n" },
              { "regex": "^(O)", "replacement": "o" },
              { "regex": "^(P)", "replacement": "p" },
              { "regex": "^(Q)", "replacement": "q" },
              { "regex": "^(R)", "replacement": "r" },
              { "regex": "^(S)", "replacement": "s" },
              { "regex": "^(T)", "replacement": "t" },
              { "regex": "^(U)", "replacement": "u" },
              { "regex": "^(V)", "replacement": "v" },
              { "regex": "^(W)", "replacement": "w" },
              { "regex": "^(X)", "replacement": "x" },
              { "regex": "^(Y)", "replacement": "y" },
              { "regex": "^(Z)", "replacement": "z" }
            ]
        }
    },
    "mcmaVersion":{
      "type": "parameter",
      "replaces": "__mcmaVersion__",
      "defaultValue": "0.14.0"
    },
    "jobType": {
      "type": "parameter",
      "replaces": "__jobType__",
      "isRequired": true,
      "choices": [
        "AI",
        "Ame",
        "Capture",
        "QA",
        "Transfer",
        "Transform",
        "Workflow"
      ]
    }
  }
}